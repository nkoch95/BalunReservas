app BalunReservas {
  wasp: {
    version: "^0.11.1"
  },
  title: "BalunReservas",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id           Int           @id @default(autoincrement())
    username     String        @unique
    password     String
    reservations Reservation[]
psl=}

entity Field {=psl
    id          Int        @id @default(autoincrement())
    description String
    timeSlots   TimeSlot[]
psl=}

entity TimeSlot {=psl
    id           Int           @id @default(autoincrement())
    startTime    String
    endTime      String
    fieldId      Int
    field        Field         @relation(fields: [fieldId], references: [id])
    reservations Reservation[]
psl=}

entity Reservation {=psl
    id           Int      @id @default(autoincrement())
    status       String
    customerName String
    price        Float
    isPaid       Boolean  @default(false)
    userId       Int
    user         User     @relation(fields: [userId], references: [id])
    timeSlotId   Int
    timeSlot     TimeSlot @relation(fields: [timeSlotId], references: [id])
psl=}

action createReservation {
  fn: import { createReservation } from "@server/actions.js",
  entities: [User, Reservation, TimeSlot]
}

action updateReservation {
  fn: import { updateReservation } from "@server/actions.js",
  entities: [User, Reservation, TimeSlot]
}

query getFields {
  fn: import { getFields } from "@server/queries.js",
  entities: [Field]
}

query getTimeSlots {
  fn: import { getTimeSlots } from "@server/queries.js",
  entities: [TimeSlot]
}

query getReservations {
  fn: import { getReservations } from "@server/queries.js",
  entities: [User, Reservation]
}

route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import { Home } from "@client/pages/Home.jsx",
  authRequired: false
}

route ReservationsRoute { path: "/reservations", to: ReservationsPage }
page ReservationsPage {
  component: import { Reservations } from "@client/pages/Reservations.jsx",
  authRequired: true
}
